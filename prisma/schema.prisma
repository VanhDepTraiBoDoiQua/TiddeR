// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  image         String?

  accounts            Account[]
  sessions            Session[]
  posts               Post[]
  postVotes           PostVote[]
  comments            Comment[]
  commentVotes        CommentVote[]
  createdCommunitys   Community[]          @relation("CreatedBy")
  subscriptions       Subscription[]
  conversationMembers ConversationMember[]
  messages            Message[]
  seenMessages        SeenMessage[]
}

model Community {
  id        String   @id @default(cuid())
  name      String   @unique
  creatorId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  posts       Post[]
  subscribers Subscription[]
}

model Subscription {
  userId      String
  communityId String

  user      User      @relation(fields: [userId], references: [id])
  community Community @relation(fields: [communityId], references: [id])

  @@id([userId, communityId])
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     Json?
  authorId    String
  communityId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author    User       @relation(fields: [authorId], references: [id])
  community Community  @relation(fields: [communityId], references: [id])
  comments  Comment[]
  postVotes PostVote[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  authorId  String
  postId    String
  replyToId String?
  createdAt DateTime @default(now())

  replyTo      Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies      Comment[]     @relation("ReplyTo")
  author       User          @relation(fields: [authorId], references: [id])
  post         Post          @relation(fields: [postId], references: [id])
  commentVotes CommentVote[]
}

model PostVote {
  userId String
  postId String
  type   VoteType

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model CommentVote {
  userId    String
  commentId String
  type      VoteType

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
}

model Conversation {
  id            String   @id @default(cuid())
  name          String?
  isGroup       Boolean?
  createdBy     String?
  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())

  messages            Message[]
  conversationMembers ConversationMember[]
}

model ConversationMember {
  conversationId String
  userId         String

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])

  @@id([conversationId, userId])
}

model Message {
  id             String   @id @default(cuid())
  userId         String
  conversationId String
  body           String?
  image          String?
  createdAt      DateTime @default(now())

  User         User          @relation(fields: [userId], references: [id])
  conversation Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  seenMessages SeenMessage[]
}

model SeenMessage {
  messageId String
  userId    String

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@id([messageId, userId])
}
